// Code generated by protoc-gen-gogo.
// source: local.proto
// DO NOT EDIT!

/*
	Package localapi is a generated protocol buffer package.

	It is generated from these files:
		local.proto

	It has these top-level messages:
		BundleRequest
		CertRequest
		BundleRequests
		CertRequests
		ID
*/
package localapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BundleRequest struct {
	ID        string `protobuf:"bytes,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	BundleID  string `protobuf:"bytes,2,opt,name=BundleID,json=bundleID,proto3" json:"BundleID,omitempty"`
	TargetDir string `protobuf:"bytes,3,opt,name=TargetDir,json=targetDir,proto3" json:"TargetDir,omitempty"`
}

func (m *BundleRequest) Reset()                    { *m = BundleRequest{} }
func (m *BundleRequest) String() string            { return proto.CompactTextString(m) }
func (*BundleRequest) ProtoMessage()               {}
func (*BundleRequest) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{0} }

// CertRequest is a request to get a private key and certificate signed by cert authority
type CertRequest struct {
	// ID is ID
	ID string `protobuf:"bytes,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	// CertAuthorityID is ID of the certificate authority
	CertAuthorityID string `protobuf:"bytes,2,opt,name=CertAuthorityID,json=certAuthorityID,proto3" json:"CertAuthorityID,omitempty"`
	// Identity is identity to generate
	Identity string `protobuf:"bytes,3,opt,name=Identity,json=identity,proto3" json:"Identity,omitempty"`
	// CommonName is a common name to produce
	CommonName string `protobuf:"bytes,4,opt,name=CommonName,json=commonName,proto3" json:"CommonName,omitempty"`
	// TTL is certificate TTL
	TTL int64 `protobuf:"varint,5,opt,name=TTL,json=tTL,proto3" json:"TTL,omitempty"`
	// KeyPath is a key path of the certificate
	KeyPath string `protobuf:"bytes,6,opt,name=KeyPath,json=keyPath,proto3" json:"KeyPath,omitempty"`
	// CertPath is a path of the generated certificate
	CertPath string `protobuf:"bytes,7,opt,name=CertPath,json=certPath,proto3" json:"CertPath,omitempty"`
	// CAPath is a path of the certificate authority cert  that signed this cert
	CAPath string `protobuf:"bytes,8,opt,name=CAPath,json=cAPath,proto3" json:"CAPath,omitempty"`
}

func (m *CertRequest) Reset()                    { *m = CertRequest{} }
func (m *CertRequest) String() string            { return proto.CompactTextString(m) }
func (*CertRequest) ProtoMessage()               {}
func (*CertRequest) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{1} }

type BundleRequests struct {
	BundleRequests []*BundleRequest `protobuf:"bytes,1,rep,name=BundleRequests,json=bundleRequests" json:"BundleRequests,omitempty"`
}

func (m *BundleRequests) Reset()                    { *m = BundleRequests{} }
func (m *BundleRequests) String() string            { return proto.CompactTextString(m) }
func (*BundleRequests) ProtoMessage()               {}
func (*BundleRequests) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{2} }

func (m *BundleRequests) GetBundleRequests() []*BundleRequest {
	if m != nil {
		return m.BundleRequests
	}
	return nil
}

type CertRequests struct {
	CertRequests []*CertRequest `protobuf:"bytes,1,rep,name=CertRequests,json=certRequests" json:"CertRequests,omitempty"`
}

func (m *CertRequests) Reset()                    { *m = CertRequests{} }
func (m *CertRequests) String() string            { return proto.CompactTextString(m) }
func (*CertRequests) ProtoMessage()               {}
func (*CertRequests) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{3} }

func (m *CertRequests) GetCertRequests() []*CertRequest {
	if m != nil {
		return m.CertRequests
	}
	return nil
}

type ID struct {
	ID string `protobuf:"bytes,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
}

func (m *ID) Reset()                    { *m = ID{} }
func (m *ID) String() string            { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()               {}
func (*ID) Descriptor() ([]byte, []int) { return fileDescriptorLocal, []int{4} }

func init() {
	proto.RegisterType((*BundleRequest)(nil), "localapi.BundleRequest")
	proto.RegisterType((*CertRequest)(nil), "localapi.CertRequest")
	proto.RegisterType((*BundleRequests)(nil), "localapi.BundleRequests")
	proto.RegisterType((*CertRequests)(nil), "localapi.CertRequests")
	proto.RegisterType((*ID)(nil), "localapi.ID")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Renewer service

type RenewerClient interface {
	CreateCertRequest(ctx context.Context, in *CertRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	GetCertRequests(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*CertRequests, error)
	DeleteCertRequest(ctx context.Context, in *ID, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	CreateBundleRequest(ctx context.Context, in *BundleRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	GetBundleRequests(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*BundleRequests, error)
	DeleteBundleRequest(ctx context.Context, in *ID, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type renewerClient struct {
	cc *grpc.ClientConn
}

func NewRenewerClient(cc *grpc.ClientConn) RenewerClient {
	return &renewerClient{cc}
}

func (c *renewerClient) CreateCertRequest(ctx context.Context, in *CertRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/localapi.Renewer/CreateCertRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renewerClient) GetCertRequests(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*CertRequests, error) {
	out := new(CertRequests)
	err := grpc.Invoke(ctx, "/localapi.Renewer/GetCertRequests", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renewerClient) DeleteCertRequest(ctx context.Context, in *ID, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/localapi.Renewer/DeleteCertRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renewerClient) CreateBundleRequest(ctx context.Context, in *BundleRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/localapi.Renewer/CreateBundleRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renewerClient) GetBundleRequests(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*BundleRequests, error) {
	out := new(BundleRequests)
	err := grpc.Invoke(ctx, "/localapi.Renewer/GetBundleRequests", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renewerClient) DeleteBundleRequest(ctx context.Context, in *ID, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/localapi.Renewer/DeleteBundleRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Renewer service

type RenewerServer interface {
	CreateCertRequest(context.Context, *CertRequest) (*google_protobuf1.Empty, error)
	GetCertRequests(context.Context, *google_protobuf1.Empty) (*CertRequests, error)
	DeleteCertRequest(context.Context, *ID) (*google_protobuf1.Empty, error)
	CreateBundleRequest(context.Context, *BundleRequest) (*google_protobuf1.Empty, error)
	GetBundleRequests(context.Context, *google_protobuf1.Empty) (*BundleRequests, error)
	DeleteBundleRequest(context.Context, *ID) (*google_protobuf1.Empty, error)
}

func RegisterRenewerServer(s *grpc.Server, srv RenewerServer) {
	s.RegisterService(&_Renewer_serviceDesc, srv)
}

func _Renewer_CreateCertRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenewerServer).CreateCertRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/localapi.Renewer/CreateCertRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenewerServer).CreateCertRequest(ctx, req.(*CertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Renewer_GetCertRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenewerServer).GetCertRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/localapi.Renewer/GetCertRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenewerServer).GetCertRequests(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Renewer_DeleteCertRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenewerServer).DeleteCertRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/localapi.Renewer/DeleteCertRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenewerServer).DeleteCertRequest(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Renewer_CreateBundleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenewerServer).CreateBundleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/localapi.Renewer/CreateBundleRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenewerServer).CreateBundleRequest(ctx, req.(*BundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Renewer_GetBundleRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenewerServer).GetBundleRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/localapi.Renewer/GetBundleRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenewerServer).GetBundleRequests(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Renewer_DeleteBundleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenewerServer).DeleteBundleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/localapi.Renewer/DeleteBundleRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenewerServer).DeleteBundleRequest(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Renewer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "localapi.Renewer",
	HandlerType: (*RenewerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCertRequest",
			Handler:    _Renewer_CreateCertRequest_Handler,
		},
		{
			MethodName: "GetCertRequests",
			Handler:    _Renewer_GetCertRequests_Handler,
		},
		{
			MethodName: "DeleteCertRequest",
			Handler:    _Renewer_DeleteCertRequest_Handler,
		},
		{
			MethodName: "CreateBundleRequest",
			Handler:    _Renewer_CreateBundleRequest_Handler,
		},
		{
			MethodName: "GetBundleRequests",
			Handler:    _Renewer_GetBundleRequests_Handler,
		},
		{
			MethodName: "DeleteBundleRequest",
			Handler:    _Renewer_DeleteBundleRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorLocal,
}

func (m *BundleRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BundleRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintLocal(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.BundleID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintLocal(data, i, uint64(len(m.BundleID)))
		i += copy(data[i:], m.BundleID)
	}
	if len(m.TargetDir) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintLocal(data, i, uint64(len(m.TargetDir)))
		i += copy(data[i:], m.TargetDir)
	}
	return i, nil
}

func (m *CertRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CertRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintLocal(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.CertAuthorityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintLocal(data, i, uint64(len(m.CertAuthorityID)))
		i += copy(data[i:], m.CertAuthorityID)
	}
	if len(m.Identity) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintLocal(data, i, uint64(len(m.Identity)))
		i += copy(data[i:], m.Identity)
	}
	if len(m.CommonName) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintLocal(data, i, uint64(len(m.CommonName)))
		i += copy(data[i:], m.CommonName)
	}
	if m.TTL != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintLocal(data, i, uint64(m.TTL))
	}
	if len(m.KeyPath) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintLocal(data, i, uint64(len(m.KeyPath)))
		i += copy(data[i:], m.KeyPath)
	}
	if len(m.CertPath) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintLocal(data, i, uint64(len(m.CertPath)))
		i += copy(data[i:], m.CertPath)
	}
	if len(m.CAPath) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintLocal(data, i, uint64(len(m.CAPath)))
		i += copy(data[i:], m.CAPath)
	}
	return i, nil
}

func (m *BundleRequests) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BundleRequests) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BundleRequests) > 0 {
		for _, msg := range m.BundleRequests {
			data[i] = 0xa
			i++
			i = encodeVarintLocal(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CertRequests) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CertRequests) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CertRequests) > 0 {
		for _, msg := range m.CertRequests {
			data[i] = 0xa
			i++
			i = encodeVarintLocal(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ID) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ID) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintLocal(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	return i, nil
}

func encodeFixed64Local(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Local(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintLocal(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *BundleRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovLocal(uint64(l))
	}
	l = len(m.BundleID)
	if l > 0 {
		n += 1 + l + sovLocal(uint64(l))
	}
	l = len(m.TargetDir)
	if l > 0 {
		n += 1 + l + sovLocal(uint64(l))
	}
	return n
}

func (m *CertRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovLocal(uint64(l))
	}
	l = len(m.CertAuthorityID)
	if l > 0 {
		n += 1 + l + sovLocal(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovLocal(uint64(l))
	}
	l = len(m.CommonName)
	if l > 0 {
		n += 1 + l + sovLocal(uint64(l))
	}
	if m.TTL != 0 {
		n += 1 + sovLocal(uint64(m.TTL))
	}
	l = len(m.KeyPath)
	if l > 0 {
		n += 1 + l + sovLocal(uint64(l))
	}
	l = len(m.CertPath)
	if l > 0 {
		n += 1 + l + sovLocal(uint64(l))
	}
	l = len(m.CAPath)
	if l > 0 {
		n += 1 + l + sovLocal(uint64(l))
	}
	return n
}

func (m *BundleRequests) Size() (n int) {
	var l int
	_ = l
	if len(m.BundleRequests) > 0 {
		for _, e := range m.BundleRequests {
			l = e.Size()
			n += 1 + l + sovLocal(uint64(l))
		}
	}
	return n
}

func (m *CertRequests) Size() (n int) {
	var l int
	_ = l
	if len(m.CertRequests) > 0 {
		for _, e := range m.CertRequests {
			l = e.Size()
			n += 1 + l + sovLocal(uint64(l))
		}
	}
	return n
}

func (m *ID) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovLocal(uint64(l))
	}
	return n
}

func sovLocal(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLocal(x uint64) (n int) {
	return sovLocal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BundleRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BundleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BundleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetDir = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertAuthorityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertAuthorityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommonName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTL", wireType)
			}
			m.TTL = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TTL |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyPath = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertPath = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CAPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CAPath = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BundleRequests) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BundleRequests: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BundleRequests: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleRequests = append(m.BundleRequests, &BundleRequest{})
			if err := m.BundleRequests[len(m.BundleRequests)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertRequests) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertRequests: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertRequests: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertRequests = append(m.CertRequests, &CertRequest{})
			if err := m.CertRequests[len(m.CertRequests)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ID) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLocal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLocal(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLocal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLocal
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLocal
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLocal(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLocal = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLocal   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("local.proto", fileDescriptorLocal) }

var fileDescriptorLocal = []byte{
	// 583 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x53, 0x4f, 0x8f, 0xd2, 0x5e,
	0x14, 0xfd, 0x15, 0xe6, 0xc7, 0x9f, 0x07, 0xc2, 0xf0, 0x46, 0xb1, 0x29, 0x4e, 0xc5, 0x1a, 0x13,
	0x42, 0x62, 0x1b, 0xc7, 0x95, 0x6e, 0xcc, 0x0c, 0x35, 0x93, 0xc6, 0x89, 0xd1, 0x86, 0x8d, 0x2e,
	0x34, 0xaf, 0xe5, 0x5a, 0x9a, 0x81, 0xbe, 0xfa, 0xfa, 0x70, 0xd2, 0x18, 0x37, 0x7e, 0x05, 0x37,
	0x7e, 0x24, 0x97, 0x26, 0x7e, 0x01, 0xc3, 0xb8, 0xf5, 0x3b, 0x98, 0xbe, 0x96, 0x81, 0x12, 0x1a,
	0xdd, 0x71, 0xee, 0xb9, 0x9c, 0x73, 0xef, 0x79, 0xb7, 0xa8, 0x31, 0xa3, 0x2e, 0x99, 0xe9, 0x21,
	0xa3, 0x9c, 0xe2, 0x9a, 0x00, 0x24, 0xf4, 0x95, 0xd7, 0x9e, 0xcf, 0xa7, 0x0b, 0x47, 0x77, 0xe9,
	0xdc, 0xf0, 0x58, 0xe8, 0xde, 0x07, 0x97, 0x46, 0x71, 0xc4, 0x21, 0x83, 0x1e, 0xe1, 0x70, 0x41,
	0x62, 0x83, 0x4f, 0x7d, 0x36, 0x79, 0x1b, 0x12, 0xc6, 0x63, 0xc3, 0xa3, 0xd4, 0x9b, 0x01, 0x09,
	0xfd, 0x28, 0xfb, 0x69, 0x90, 0xd0, 0x37, 0x48, 0x10, 0x50, 0x4e, 0xb8, 0x4f, 0x83, 0x28, 0x75,
	0x51, 0x7a, 0x19, 0x2b, 0x90, 0xb3, 0x78, 0x67, 0xc0, 0x3c, 0xe4, 0x71, 0x4a, 0x6a, 0xaf, 0xd0,
	0xb5, 0x93, 0x45, 0x30, 0x99, 0x81, 0x0d, 0xef, 0x17, 0x10, 0x71, 0xdc, 0x42, 0x25, 0xcb, 0x94,
	0xa5, 0xbe, 0x34, 0xa8, 0xdb, 0x25, 0xdf, 0xc4, 0x0a, 0xaa, 0xa5, 0x0d, 0x96, 0x29, 0x97, 0x44,
	0xb5, 0xe6, 0x64, 0x18, 0xdf, 0x42, 0xf5, 0x31, 0x61, 0x1e, 0x70, 0xd3, 0x67, 0x72, 0x59, 0x90,
	0x75, 0xbe, 0x2a, 0x68, 0x97, 0x12, 0x6a, 0x8c, 0x80, 0xf1, 0x22, 0xe5, 0x01, 0x6a, 0x27, 0xf4,
	0xf1, 0x82, 0x4f, 0x29, 0xf3, 0x79, 0x7c, 0x65, 0xd0, 0x76, 0xf3, 0xe5, 0x64, 0x06, 0x6b, 0x02,
	0x01, 0xf7, 0x79, 0x9c, 0xd9, 0xd4, 0xfc, 0x0c, 0x63, 0x15, 0xa1, 0x11, 0x9d, 0xcf, 0x69, 0xf0,
	0x9c, 0xcc, 0x41, 0xde, 0x13, 0x2c, 0x72, 0xaf, 0x2a, 0x78, 0x1f, 0x95, 0xc7, 0xe3, 0x33, 0xf9,
	0xff, 0xbe, 0x34, 0x28, 0xdb, 0x65, 0x3e, 0x3e, 0xc3, 0x32, 0xaa, 0x3e, 0x83, 0xf8, 0x05, 0xe1,
	0x53, 0xb9, 0x22, 0xda, 0xab, 0xe7, 0x29, 0x4c, 0x7c, 0x92, 0x89, 0x04, 0x55, 0x4d, 0x7d, 0xdc,
	0x0c, 0xe3, 0x2e, 0xaa, 0x8c, 0x8e, 0x05, 0x53, 0x13, 0x4c, 0xc5, 0x15, 0x48, 0x7b, 0x89, 0x5a,
	0xb9, 0x00, 0x23, 0xfc, 0x64, 0xbb, 0x22, 0x4b, 0xfd, 0xf2, 0xa0, 0x71, 0x74, 0x53, 0x5f, 0x3d,
	0xb7, 0x9e, 0xe3, 0xed, 0x96, 0x93, 0x6b, 0xd7, 0x2c, 0xd4, 0xdc, 0xc8, 0x2d, 0xc2, 0x8f, 0xf2,
	0x38, 0x93, 0xbb, 0xb1, 0x96, 0xdb, 0x60, 0xed, 0xa6, 0xbb, 0xd1, 0xaa, 0x5d, 0x4f, 0x32, 0xdf,
	0x4e, 0xfe, 0xe8, 0xf7, 0x1e, 0xaa, 0xda, 0x10, 0xc0, 0x05, 0x30, 0x0c, 0xa8, 0x33, 0x62, 0x40,
	0x38, 0x6c, 0x3e, 0xd5, 0x6e, 0x6d, 0xa5, 0xab, 0xa7, 0xa7, 0xa4, 0xaf, 0x4e, 0x49, 0x7f, 0x9a,
	0x9c, 0x92, 0x76, 0xe7, 0xf3, 0x8f, 0x5f, 0x5f, 0x4a, 0x3d, 0xad, 0x6b, 0x7c, 0x78, 0x60, 0x88,
	0x7f, 0x1a, 0xc9, 0x14, 0x2c, 0x9b, 0xe2, 0xb1, 0x34, 0xc4, 0x04, 0xb5, 0x4f, 0x81, 0xe7, 0xd6,
	0x2a, 0x50, 0x53, 0xba, 0x3b, 0xcd, 0x23, 0x4d, 0x15, 0x2e, 0x32, 0x2e, 0x70, 0xc1, 0x6f, 0x50,
	0xc7, 0x84, 0x19, 0xe4, 0x37, 0x69, 0xae, 0xc5, 0x2c, 0xb3, 0x70, 0x81, 0xbb, 0x42, 0xfa, 0x70,
	0xd8, 0xdb, 0x2d, 0x6d, 0x7c, 0xb4, 0xcc, 0x4f, 0xf8, 0x1c, 0x1d, 0xa4, 0x49, 0xe5, 0x3f, 0x98,
	0xa2, 0x67, 0xfd, 0x9b, 0x99, 0x26, 0xaf, 0xcd, 0xd2, 0x03, 0xd8, 0xcc, 0xcb, 0x43, 0x9d, 0x53,
	0xe0, 0x5b, 0x97, 0x55, 0x94, 0x98, 0x5c, 0x30, 0x42, 0xa4, 0xf5, 0x85, 0x97, 0x82, 0x0b, 0xbd,
	0xb0, 0x83, 0x0e, 0xd2, 0xd4, 0xf2, 0x5b, 0xfd, 0x5b, 0x6e, 0xf7, 0x84, 0xfc, 0xed, 0xe1, 0x61,
	0x91, 0xbc, 0x48, 0xee, 0x64, 0xff, 0xdb, 0x52, 0x95, 0xbe, 0x2f, 0x55, 0xe9, 0xe7, 0x52, 0x95,
	0xbe, 0x5e, 0xaa, 0xff, 0x39, 0x15, 0x21, 0xf4, 0xf0, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6,
	0xf6, 0x7f, 0xea, 0x0f, 0x05, 0x00, 0x00,
}
