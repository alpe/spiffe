// Code generated by protoc-gen-gogo.
// source: workload.proto
// DO NOT EDIT!

/*
	Package api is a generated protocol buffer package.

	It is generated from these files:
		workload.proto

	It has these top-level messages:
		CertificateRequest
		CertificateResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CertificateRequest struct {
	CertAuthorityID string `protobuf:"bytes,1,opt,name=CertAuthorityID,json=certAuthorityID,proto3" json:"CertAuthorityID,omitempty"`
	TTL             int64  `protobuf:"varint,2,opt,name=TTL,json=tTL,proto3" json:"TTL,omitempty"`
	CSR             []byte `protobuf:"bytes,3,opt,name=CSR,json=cSR,proto3" json:"CSR,omitempty"`
}

func (m *CertificateRequest) Reset()                    { *m = CertificateRequest{} }
func (m *CertificateRequest) String() string            { return proto.CompactTextString(m) }
func (*CertificateRequest) ProtoMessage()               {}
func (*CertificateRequest) Descriptor() ([]byte, []int) { return fileDescriptorWorkload, []int{0} }

type CertificateResponse struct {
	Cert []byte `protobuf:"bytes,1,opt,name=Cert,json=cert,proto3" json:"Cert,omitempty"`
}

func (m *CertificateResponse) Reset()                    { *m = CertificateResponse{} }
func (m *CertificateResponse) String() string            { return proto.CompactTextString(m) }
func (*CertificateResponse) ProtoMessage()               {}
func (*CertificateResponse) Descriptor() ([]byte, []int) { return fileDescriptorWorkload, []int{1} }

func init() {
	proto.RegisterType((*CertificateRequest)(nil), "api.CertificateRequest")
	proto.RegisterType((*CertificateResponse)(nil), "api.CertificateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Service service

type ServiceClient interface {
	ProcessCertificateRequest(ctx context.Context, in *CertificateRequest, opts ...grpc.CallOption) (*CertificateResponse, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) ProcessCertificateRequest(ctx context.Context, in *CertificateRequest, opts ...grpc.CallOption) (*CertificateResponse, error) {
	out := new(CertificateResponse)
	err := grpc.Invoke(ctx, "/api.Service/ProcessCertificateRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceServer interface {
	ProcessCertificateRequest(context.Context, *CertificateRequest) (*CertificateResponse, error)
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_ProcessCertificateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ProcessCertificateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Service/ProcessCertificateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ProcessCertificateRequest(ctx, req.(*CertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessCertificateRequest",
			Handler:    _Service_ProcessCertificateRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorWorkload,
}

func (m *CertificateRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CertificateRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CertAuthorityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintWorkload(data, i, uint64(len(m.CertAuthorityID)))
		i += copy(data[i:], m.CertAuthorityID)
	}
	if m.TTL != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintWorkload(data, i, uint64(m.TTL))
	}
	if len(m.CSR) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintWorkload(data, i, uint64(len(m.CSR)))
		i += copy(data[i:], m.CSR)
	}
	return i, nil
}

func (m *CertificateResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CertificateResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cert) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintWorkload(data, i, uint64(len(m.Cert)))
		i += copy(data[i:], m.Cert)
	}
	return i, nil
}

func encodeFixed64Workload(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Workload(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintWorkload(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *CertificateRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.CertAuthorityID)
	if l > 0 {
		n += 1 + l + sovWorkload(uint64(l))
	}
	if m.TTL != 0 {
		n += 1 + sovWorkload(uint64(m.TTL))
	}
	l = len(m.CSR)
	if l > 0 {
		n += 1 + l + sovWorkload(uint64(l))
	}
	return n
}

func (m *CertificateResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Cert)
	if l > 0 {
		n += 1 + l + sovWorkload(uint64(l))
	}
	return n
}

func sovWorkload(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWorkload(x uint64) (n int) {
	return sovWorkload(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CertificateRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertAuthorityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertAuthorityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTL", wireType)
			}
			m.TTL = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TTL |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CSR", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWorkload
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CSR = append(m.CSR[:0], data[iNdEx:postIndex]...)
			if m.CSR == nil {
				m.CSR = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkload(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertificateResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWorkload
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = append(m.Cert[:0], data[iNdEx:postIndex]...)
			if m.Cert == nil {
				m.Cert = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkload(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorkload(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorkload
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthWorkload
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWorkload
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWorkload(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWorkload = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorkload   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("workload.proto", fileDescriptorWorkload) }

var fileDescriptorWorkload = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4a, 0x33, 0x31,
	0x14, 0x85, 0xff, 0x74, 0xca, 0x2f, 0x86, 0x62, 0x6b, 0x04, 0x1d, 0x8b, 0x0c, 0x65, 0x56, 0xa3,
	0xe0, 0x04, 0x75, 0xe7, 0x4e, 0xeb, 0x46, 0xe8, 0x42, 0xd2, 0xae, 0xdc, 0x48, 0x9a, 0xc6, 0x69,
	0xb0, 0xce, 0x8d, 0xc9, 0x6d, 0xcb, 0x6c, 0x7d, 0x05, 0x37, 0x3e, 0x92, 0x4b, 0xc1, 0x17, 0x90,
	0xea, 0x83, 0xc8, 0xb4, 0x75, 0x51, 0xea, 0x2e, 0xf9, 0x0e, 0x9c, 0xef, 0x72, 0xe8, 0xd6, 0x14,
	0xdc, 0xc3, 0x08, 0xe4, 0x20, 0xb5, 0x0e, 0x10, 0x58, 0x20, 0xad, 0x69, 0xde, 0x66, 0x06, 0x87,
	0xe3, 0x7e, 0xaa, 0xe0, 0x91, 0x67, 0xce, 0xaa, 0x63, 0xad, 0xc0, 0x17, 0x1e, 0xf5, 0xf2, 0x9b,
	0x49, 0xd4, 0x53, 0x59, 0x70, 0x1c, 0x1a, 0x37, 0xb8, 0xb3, 0xd2, 0x61, 0xc1, 0x33, 0x80, 0x6c,
	0xa4, 0xa5, 0x35, 0x7e, 0xf9, 0xe4, 0xd2, 0x1a, 0x2e, 0xf3, 0x1c, 0x50, 0xa2, 0x81, 0xdc, 0x2f,
	0x04, 0x71, 0x9f, 0xb2, 0xb6, 0x76, 0x68, 0xee, 0x8d, 0x92, 0xa8, 0x85, 0x7e, 0x1a, 0x6b, 0x8f,
	0x2c, 0xa1, 0xf5, 0x92, 0x5e, 0x8c, 0x71, 0x08, 0xce, 0x60, 0x71, 0x7d, 0x15, 0x92, 0x16, 0x49,
	0x36, 0x45, 0x5d, 0xad, 0x62, 0xd6, 0xa0, 0x41, 0xaf, 0xd7, 0x09, 0x2b, 0x2d, 0x92, 0x04, 0x22,
	0xc0, 0x5e, 0xa7, 0x24, 0xed, 0xae, 0x08, 0x83, 0x16, 0x49, 0x6a, 0x22, 0x50, 0x5d, 0x11, 0x1f,
	0xd2, 0x9d, 0x15, 0x87, 0xb7, 0x90, 0x7b, 0xcd, 0x18, 0xad, 0x96, 0x78, 0xde, 0x5c, 0x13, 0xd5,
	0xb2, 0xf9, 0x74, 0x4a, 0x37, 0xba, 0xda, 0x4d, 0x8c, 0xd2, 0x6c, 0x44, 0xf7, 0x6f, 0x1c, 0x28,
	0xed, 0xfd, 0x1f, 0x07, 0xee, 0xa5, 0xd2, 0x9a, 0x74, 0x3d, 0x68, 0x86, 0xeb, 0xc1, 0x42, 0x17,
	0x1f, 0x3c, 0x7f, 0x7c, 0xbf, 0x54, 0x76, 0xe3, 0x6d, 0x3e, 0x39, 0xe1, 0xbf, 0x33, 0x73, 0x6f,
	0xb2, 0xfc, 0x9c, 0x1c, 0x5d, 0x36, 0xde, 0x66, 0x11, 0x79, 0x9f, 0x45, 0xe4, 0x73, 0x16, 0x91,
	0xd7, 0xaf, 0xe8, 0x5f, 0xff, 0xff, 0x7c, 0xa0, 0xb3, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xca,
	0xbd, 0xb5, 0xe4, 0x93, 0x01, 0x00, 0x00,
}
